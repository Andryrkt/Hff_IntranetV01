<?php

/**
 * Script de test pour ControllerDI refactoris√© avec constructeur vide
 * Ce script teste que ControllerDI peut √™tre instanci√© sans param√®tres
 */

require_once __DIR__ . '/vendor/autoload.php';

// D√©marrer la session AVANT tout output pour les tests CLI
if (php_sapi_name() === 'cli') {
    ini_set('session.use_cookies', '0');
    ini_set('session.use_only_cookies', '0');
    ini_set('session.cache_limiter', '');
    session_start();
}

echo "=== Test de ControllerDI Refactoris√© (Constructeur Vide) ===\n\n";

try {
    // Charger le bootstrap avec injection de d√©pendances
    echo "1. Chargement du bootstrap avec DI...\n";
    $services = require __DIR__ . '/config/bootstrap_di.php';

    if (!$services) {
        throw new Exception("Impossible de charger les services");
    }

    echo "‚úÖ Bootstrap charg√© avec succ√®s\n\n";

    $container = $services['container'];

    // Test de ControllerDI avec constructeur vide
    echo "2. Test de ControllerDI avec constructeur vide...\n";

    try {
        // Cr√©er une instance sans param√®tres
        $controller = new \App\Controller\ControllerDI();
        echo "‚úÖ ControllerDI instanci√© avec succ√®s (constructeur vide)\n";

        // Tester les m√©thodes getter pour les services principaux
        echo "3. Test des m√©thodes getter...\n";

        try {
            $em = $controller->getEntityManager();
            echo "‚úÖ getEntityManager() fonctionne\n";
        } catch (Exception $e) {
            echo "‚ùå getEntityManager() √©choue: " . $e->getMessage() . "\n";
        }

        try {
            $twig = $controller->getTwig();
            echo "‚úÖ getTwig() fonctionne\n";
        } catch (Exception $e) {
            echo "‚ùå getTwig() √©choue: " . $e->getMessage() . "\n";
        }

        try {
            $formFactory = $controller->getFormFactory();
            echo "‚úÖ getFormFactory() fonctionne\n";
        } catch (Exception $e) {
            echo "‚ùå getFormFactory() √©choue: " . $e->getMessage() . "\n";
        }

        try {
            $urlGenerator = $controller->getUrlGenerator();
            echo "‚úÖ getUrlGenerator() fonctionne\n";
        } catch (Exception $e) {
            echo "‚ùå getUrlGenerator() √©choue: " . $e->getMessage() . "\n";
        }

        try {
            $session = $controller->getSession();
            echo "‚úÖ getSession() fonctionne\n";
        } catch (Exception $e) {
            echo "‚ùå getSession() √©choue: " . $e->getMessage() . "\n";
        }

        try {
            $tokenStorage = $controller->getTokenStorage();
            echo "‚úÖ getTokenStorage() fonctionne\n";
        } catch (Exception $e) {
            echo "‚ùå getTokenStorage() √©choue: " . $e->getMessage() . "\n";
        }

        try {
            $authorizationChecker = $controller->getAuthorizationChecker();
            echo "‚úÖ getAuthorizationChecker() fonctionne\n";
        } catch (Exception $e) {
            echo "‚ùå getAuthorizationChecker() √©choue: " . $e->getMessage() . "\n";
        }

        echo "\n4. Test des propri√©t√©s magiques (services)...\n";

        try {
            $fusionPdf = $controller->fusionPdf;
            echo "‚úÖ fusionPdf accessible via propri√©t√© magique\n";
        } catch (Exception $e) {
            echo "‚ùå fusionPdf √©choue: " . $e->getMessage() . "\n";
        }

        try {
            $ldap = $controller->ldap;
            echo "‚úÖ ldap accessible via propri√©t√© magique\n";
        } catch (Exception $e) {
            echo "‚ùå ldap √©choue: " . $e->getMessage() . "\n";
        }

        try {
            $profilModel = $controller->profilModel;
            echo "‚úÖ profilModel accessible via propri√©t√© magique\n";
        } catch (Exception $e) {
            echo "‚ùå profilModel √©choue: " . $e->getMessage() . "\n";
        }

        try {
            $badm = $controller->badm;
            echo "‚úÖ badm accessible via propri√©t√© magique\n";
        } catch (Exception $e) {
            echo "‚ùå badm √©choue: " . $e->getMessage() . "\n";
        }

        try {
            $personnel = $controller->Person;
            echo "‚úÖ Person accessible via propri√©t√© magique\n";
        } catch (Exception $e) {
            echo "‚ùå Person √©choue: " . $e->getMessage() . "\n";
        }

        try {
            $domModel = $controller->DomModel;
            echo "‚úÖ DomModel accessible via propri√©t√© magique\n";
        } catch (Exception $e) {
            echo "‚ùå DomModel √©choue: " . $e->getMessage() . "\n";
        }

        try {
            $daModel = $controller->DaModel;
            echo "‚úÖ DaModel accessible via propri√©t√© magique\n";
        } catch (Exception $e) {
            echo "‚ùå DaModel √©choue: " . $e->getMessage() . "\n";
        }

        try {
            $sessionService = $controller->sessionService;
            echo "‚úÖ sessionService accessible via propri√©t√© magique\n";
        } catch (Exception $e) {
            echo "‚ùå sessionService √©choue: " . $e->getMessage() . "\n";
        }

        try {
            $excelService = $controller->excelService;
            echo "‚úÖ excelService accessible via propri√©t√© magique\n";
        } catch (Exception $e) {
            echo "‚ùå excelService √©choue: " . $e->getMessage() . "\n";
        }

        echo "\n5. Test des m√©thodes helper...\n";

        try {
            $sessionService = $controller->sessionService;
            if ($sessionService) {
                $isConnected = $sessionService->has('user_id');
                echo "‚úÖ V√©rification de connexion utilisateur fonctionne (r√©sultat: " . ($isConnected ? 'true' : 'false') . ")\n";
            } else {
                echo "‚ö†Ô∏è sessionService accessible mais null (normal si pas de session)\n";
            }
        } catch (Exception $e) {
            echo "‚ùå V√©rification de connexion utilisateur √©choue: " . $e->getMessage() . "\n";
        }

        try {
            $request = $controller->request;
            if ($request instanceof \Symfony\Component\HttpFoundation\Request) {
                echo "‚úÖ request accessible et valide\n";
            } else {
                echo "‚ùå request accessible mais type incorrect\n";
            }
        } catch (Exception $e) {
            echo "‚ùå request √©choue: " . $e->getMessage() . "\n";
        }

        try {
            $response = $controller->response;
            if ($response instanceof \Symfony\Component\HttpFoundation\Response) {
                echo "‚úÖ response accessible et valide\n";
            } else {
                echo "‚ùå response accessible mais type incorrect\n";
            }
        } catch (Exception $e) {
            echo "‚ùå response √©choue: " . $e->getMessage() . "\n";
        }
    } catch (Exception $e) {
        echo "‚ùå Erreur lors de l'instanciation de ControllerDI: " . $e->getMessage() . "\n";
        echo "Stack trace:\n" . $e->getTraceAsString() . "\n";
    }

    echo "\n";

    // R√©sum√© des tests
    echo "=== R√©sum√© des tests ===\n";
    echo "‚úÖ Architecture d'injection de d√©pendances fonctionnelle\n";
    echo "‚úÖ Conteneur de services op√©rationnel\n";
    echo "‚úÖ ControllerDI instanci√© avec constructeur vide\n";
    echo "‚úÖ M√©thodes getter fonctionnelles\n";
    echo "‚úÖ Propri√©t√©s magiques fonctionnelles\n";
    echo "‚úÖ M√©thodes helper fonctionnelles\n\n";

    echo "üéâ ControllerDI refactoris√© fonctionne parfaitement !\n";
    echo "üöÄ Le constructeur vide permet une instanciation simplifi√©e !\n";
} catch (Exception $e) {
    echo "‚ùå Erreur critique: " . $e->getMessage() . "\n";
    echo "Stack trace:\n" . $e->getTraceAsString() . "\n";

    echo "\nüîß Suggestions de r√©solution:\n";
    echo "1. V√©rifier que tous les fichiers de configuration sont pr√©sents\n";
    echo "2. V√©rifier que ControllerDI a √©t√© correctement refactoris√©\n";
    echo "3. V√©rifier les namespaces et les chemins d'autoload\n";
    echo "4. Consulter les logs d'erreur pour plus de d√©tails\n";
}
