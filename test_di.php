<?php

/**
 * Script de test pour l'injection de d√©pendances
 * Ce script teste la nouvelle architecture avec le conteneur de services
 */

require_once __DIR__ . '/vendor/autoload.php';

// D√©marrer la session AVANT tout output pour les tests CLI
if (php_sapi_name() === 'cli') {
    ini_set('session.use_cookies', '0');
    ini_set('session.use_only_cookies', '0');
    ini_set('session.cache_limiter', '');
    session_start();
}

echo "=== Test de l'Injection de D√©pendances ===\n\n";

try {
    // Charger le nouveau bootstrap avec injection de d√©pendances
    echo "1. Chargement du bootstrap avec DI...\n";
    $services = require __DIR__ . '/config/bootstrap_di.php';

    if (!$services) {
        throw new Exception("Impossible de charger les services");
    }

    echo "‚úÖ Bootstrap charg√© avec succ√®s\n\n";

    // V√©rifier que le conteneur est disponible
    echo "2. V√©rification du conteneur de services...\n";
    $container = $services['container'];

    if (!$container) {
        throw new Exception("Conteneur de services non disponible");
    }

    echo "‚úÖ Conteneur de services disponible\n\n";

    // Tester les services principaux
    echo "3. Test des services principaux...\n";

    // Test de l'EntityManager
    try {
        $entityManager = $container->get('doctrine.orm.entity_manager');
        echo "‚úÖ EntityManager disponible\n";
    } catch (Exception $e) {
        echo "‚ùå EntityManager non disponible: " . $e->getMessage() . "\n";
    }

    // Test de Twig
    try {
        $twig = $container->get('twig');
        echo "‚úÖ Twig disponible\n";
    } catch (Exception $e) {
        echo "‚ùå Twig non disponible: " . $e->getMessage() . "\n";
    }

    // Test de la factory de formulaires
    try {
        $formFactory = $container->get('form.factory');
        echo "‚úÖ FormFactory disponible\n";
    } catch (Exception $e) {
        echo "‚ùå FormFactory non disponible: " . $e->getMessage() . "\n";
    }

    // Test du g√©n√©rateur d'URL
    try {
        $urlGenerator = $container->get('router');
        echo "‚úÖ UrlGenerator disponible\n";
    } catch (Exception $e) {
        echo "‚ùå UrlGenerator non disponible: " . $e->getMessage() . "\n";
    }

    // Test de la session
    try {
        $session = $container->get('session');
        echo "‚úÖ Session disponible\n";
    } catch (Exception $e) {
        echo "‚ùå Session non disponible: " . $e->getMessage() . "\n";
    }

    echo "\n";

    // Test de la nouvelle classe ControllerDI
    echo "4. Test de la classe ControllerDI...\n";

    try {
        // Cr√©er une instance du contr√¥leur avec injection de d√©pendances
        $controller = new \App\Controller\ControllerDI(
            $container->get('doctrine.orm.entity_manager'),
            $container->get('router'),
            $container->get('twig'),
            $container->get('form.factory'),
            $container->get('session'),
            $container->get('security.token_storage'),
            $container->get('security.authorization_checker'),
            $container->get('App\Service\FusionPdf'),
            $container->get('App\Model\LdapModel'),
            $container->get('App\Model\ProfilModel'),
            $container->get('App\Model\badm\BadmModel'),
            $container->get('App\Model\admin\personnel\PersonnelModel'),
            $container->get('App\Model\dom\DomModel'),
            $container->get('App\Model\da\DaModel'),
            $container->get('App\Model\dom\DomDetailModel'),
            $container->get('App\Model\dom\DomDuplicationModel'),
            $container->get('App\Model\dom\DomListModel'),
            $container->get('App\Model\dit\DitModel'),
            $container->get('App\Model\TransferDonnerModel'),
            $container->get('App\Service\SessionManagerService'),
            $container->get('App\Service\ExcelService')
        );

        echo "‚úÖ ControllerDI instanci√© avec succ√®s\n";

        // Tester les m√©thodes getter
        $em = $controller->getEntityManager();
        $twig = $controller->getTwig();
        $formFactory = $controller->getFormFactory();

        echo "‚úÖ M√©thodes getter fonctionnelles\n";
    } catch (Exception $e) {
        echo "‚ùå Erreur lors de l'instanciation de ControllerDI: " . $e->getMessage() . "\n";
        echo "Stack trace:\n" . $e->getTraceAsString() . "\n";
    }

    echo "\n";

    // Test des services personnalis√©s
    echo "5. Test des services personnalis√©s...\n";

    try {
        $menuService = $container->get('App\Service\navigation\MenuService');
        echo "‚úÖ MenuService disponible\n";
    } catch (Exception $e) {
        echo "‚ùå MenuService non disponible: " . $e->getMessage() . "\n";
    }

    try {
        $breadcrumbService = $container->get('App\Service\navigation\BreadcrumbMenuService');
        echo "‚úÖ BreadcrumbMenuService disponible\n";
    } catch (Exception $e) {
        echo "‚ùå BreadcrumbMenuService non disponible: " . $e->getMessage() . "\n";
    }

    echo "\n";

    // Test des extensions Twig
    echo "6. Test des extensions Twig...\n";

    try {
        $appExtension = $container->get('App\Twig\AppExtension');
        echo "‚úÖ AppExtension disponible\n";
    } catch (Exception $e) {
        echo "‚ùå AppExtension non disponible: " . $e->getMessage() . "\n";
    }

    try {
        $breadcrumbExtension = $container->get('App\Twig\BreadcrumbExtension');
        echo "‚úÖ BreadcrumbExtension disponible\n";
    } catch (Exception $e) {
        echo "‚ùå BreadcrumbExtension non disponible: " . $e->getMessage() . "\n";
    }

    echo "\n";

    // R√©sum√© des tests
    echo "=== R√©sum√© des tests ===\n";
    echo "‚úÖ Architecture d'injection de d√©pendances fonctionnelle\n";
    echo "‚úÖ Conteneur de services op√©rationnel\n";
    echo "‚úÖ Services principaux disponibles\n";
    echo "‚úÖ Nouvelle classe ControllerDI fonctionnelle\n";
    echo "‚úÖ Services personnalis√©s configur√©s\n";
    echo "‚úÖ Extensions Twig disponibles\n\n";

    echo "üéâ L'application est pr√™te pour la migration vers Symfony 5 !\n";
} catch (Exception $e) {
    echo "‚ùå Erreur critique: " . $e->getMessage() . "\n";
    echo "Stack trace:\n" . $e->getTraceAsString() . "\n";

    echo "\nüîß Suggestions de r√©solution:\n";
    echo "1. V√©rifier que tous les fichiers de configuration sont pr√©sents\n";
    echo "2. V√©rifier la syntaxe YAML des fichiers de configuration\n";
    echo "3. V√©rifier que toutes les classes r√©f√©renc√©es existent\n";
    echo "4. V√©rifier les namespaces et les chemins d'autoload\n";
    echo "5. Consulter les logs d'erreur pour plus de d√©tails\n";
}
